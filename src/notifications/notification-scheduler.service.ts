import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { InjectBot } from 'nestjs-telegraf';
import { PrismaService } from 'prisma/prisma.service';
import { WireGuardService } from 'src/wireGuardService/WireGuardService.service';
import { Telegraf } from 'telegraf';

@Injectable()
export class NotificationSchedulerService {
  private readonly logger = new Logger(NotificationSchedulerService.name);

  constructor(
    private readonly prisma: PrismaService,
    @InjectBot() private readonly bot: Telegraf,
    private readonly wireGuardService: WireGuardService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
   */
  @Cron('0 10 * * *', {
    name: 'subscription-expiry-reminder',
    timeZone: 'Europe/Moscow',
  })
  async sendExpiryReminders() {
    this.logger.log('üîî –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(23, 59, 59, 999);

      const dayAfterTomorrow = new Date(tomorrow);
      dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);
      dayAfterTomorrow.setHours(0, 0, 0, 0);

      const expiringUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            gte: tomorrow,
            lt: dayAfterTomorrow,
          },
          isDeleted: false,
        },
        select: {
          id: true,
          telegramId: true,
          username: true,
          subscriptionEnd: true,
          promoCodeUsedId: true,
          createdAt: true,
        },
      });

      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: ${expiringUsers.length}`,
      );

      if (expiringUsers.length === 0) {
        this.logger.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –∑–∞–≤—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏');
        return;
      }

      let sentCount = 0;
      let errorCount = 0;

      for (const user of expiringUsers) {
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
          const isTrialPeriod = this.isUserTrialPeriod(user);

          let message: string;
          if (isTrialPeriod) {
            message = this.getTrialExpiryMessage(user);
          } else {
            message = this.getSubscriptionExpiryMessage(user);
          }

          await this.bot.telegram.sendMessage(
            user.telegramId.toString(),
            message,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'buy_subscription',
                    },
                    {
                      text: 'üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                      callback_data: 'enter_promo',
                    },
                  ],
                  [
                    {
                      text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'subscription',
                    },
                  ],
                ],
              },
            },
          );

          // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
          await this.prisma.eventLog.create({
            data: {
              userId: user.id,
              action: 'EXPIRY_REMINDER_SENT',
              metadata: {
                expiryDate: user.subscriptionEnd?.toISOString(),
                isTrialPeriod,
                reminderType: 'one_day_before',
              },
            },
          });

          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`,
          );

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise((resolve) => setTimeout(resolve, 100));
        } catch (error) {
          errorCount++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
            error,
          );
        }
      }

      this.logger.log(
        `üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`,
      );
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00
   */
  @Cron('0 11 * * *', {
    name: 'subscription-3day-reminder',
    timeZone: 'Europe/Moscow',
  })
  async sendThreeDayReminders() {
    this.logger.log('üîî –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ 3 –¥–Ω—è...');

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
      const threeDaysFromNow = new Date();
      threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);
      threeDaysFromNow.setHours(0, 0, 0, 0);

      const fourDaysFromNow = new Date(threeDaysFromNow);
      fourDaysFromNow.setDate(fourDaysFromNow.getDate() + 1);

      const expiringUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            gte: threeDaysFromNow,
            lt: fourDaysFromNow,
          },
          isDeleted: false,
        },
        select: {
          id: true,
          telegramId: true,
          username: true,
          subscriptionEnd: true,
          promoCodeUsedId: true,
          createdAt: true,
        },
      });

      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è: ${expiringUsers.length}`,
      );

      if (expiringUsers.length === 0) {
        this.logger.log(
          '‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è',
        );
        return;
      }

      let sentCount = 0;
      let errorCount = 0;

      for (const user of expiringUsers) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è
          const today = new Date();
          today.setHours(0, 0, 0, 0);

          const existingLog = await this.prisma.eventLog.findFirst({
            where: {
              userId: user.id,
              action: 'THREE_DAY_REMINDER_SENT',
              timestamp: {
                gte: today,
              },
            },
          });

          if (existingLog) {
            this.logger.log(
              `‚è≠Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`,
            );
            continue;
          }

          const isTrialPeriod = this.isUserTrialPeriod(user);

          let message: string;
          if (isTrialPeriod) {
            message = this.getTrialThreeDayReminderMessage(user);
          } else {
            message = this.getSubscriptionThreeDayReminderMessage(user);
          }

          await this.bot.telegram.sendMessage(
            user.telegramId.toString(),
            message,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'buy_subscription',
                    },
                    {
                      text: 'üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                      callback_data: 'enter_promo',
                    },
                  ],
                  [
                    {
                      text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'subscription',
                    },
                  ],
                ],
              },
            },
          );

          // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
          await this.prisma.eventLog.create({
            data: {
              userId: user.id,
              action: 'THREE_DAY_REMINDER_SENT',
              metadata: {
                expiryDate: user.subscriptionEnd?.toISOString(),
                isTrialPeriod,
                reminderType: 'three_days_before',
              },
            },
          });

          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`,
          );

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise((resolve) => setTimeout(resolve, 100));
        } catch (error) {
          errorCount++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
            error,
          );
        }
      }

      this.logger.log(
        `üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 3 –¥–Ω—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 3 –¥–Ω—è:',
        error,
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
   */
  @Cron('0 9 * * *', {
    name: 'subscription-week-reminder',
    timeZone: 'Europe/Moscow',
  })
  async sendWeekReminders() {
    this.logger.log('üîî –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é...');

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
      const weekFromNow = new Date();
      weekFromNow.setDate(weekFromNow.getDate() + 7);
      weekFromNow.setHours(0, 0, 0, 0);

      const eightDaysFromNow = new Date(weekFromNow);
      eightDaysFromNow.setDate(eightDaysFromNow.getDate() + 1);

      const expiringUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            gte: weekFromNow,
            lt: eightDaysFromNow,
          },
          isDeleted: false,
        },
        select: {
          id: true,
          telegramId: true,
          username: true,
          subscriptionEnd: true,
          promoCodeUsedId: true,
          createdAt: true,
        },
      });

      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: ${expiringUsers.length}`,
      );

      if (expiringUsers.length === 0) {
        this.logger.log(
          '‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é',
        );
        return;
      }

      let sentCount = 0;
      let errorCount = 0;

      for (const user of expiringUsers) {
        try {
          const today = new Date();
          today.setHours(0, 0, 0, 0);

          const existingLog = await this.prisma.eventLog.findFirst({
            where: {
              userId: user.id,
              action: 'WEEK_REMINDER_SENT',
              timestamp: {
                gte: today,
              },
            },
          });

          if (existingLog) {
            this.logger.log(
              `‚è≠Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`,
            );
            continue;
          }

          const isTrialPeriod = this.isUserTrialPeriod(user);

          let message: string;
          if (isTrialPeriod) {
            this.logger.log(
              `‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId} —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é`,
            );
            continue;
          } else {
            message = this.getSubscriptionWeekReminderMessage(user);
          }

          await this.bot.telegram.sendMessage(
            user.telegramId.toString(),
            message,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'buy_subscription',
                    },
                    {
                      text: 'üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                      callback_data: 'enter_promo',
                    },
                  ],
                  [
                    {
                      text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'subscription',
                    },
                  ],
                ],
              },
            },
          );

          await this.prisma.eventLog.create({
            data: {
              userId: user.id,
              action: 'WEEK_REMINDER_SENT',
              metadata: {
                expiryDate: user.subscriptionEnd?.toISOString(),
                isTrialPeriod,
                reminderType: 'one_week_before',
              },
            },
          });

          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`,
          );

          await new Promise((resolve) => setTimeout(resolve, 100));
        } catch (error) {
          errorCount++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
            error,
          );
        }
      }

      this.logger.log(
        `üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:',
        error,
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
   */
  @Cron('0 10 * * *', {
    name: 'subscription-expired-notification',
    timeZone: 'Europe/Moscow',
  })
  async sendExpiredNotifications() {
    this.logger.log('üîî –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const expiredUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            gte: today,
            lt: tomorrow,
          },
          isDeleted: false,
        },
        select: {
          id: true,
          telegramId: true,
          username: true,
          subscriptionEnd: true,
          promoCodeUsedId: true,
          createdAt: true,
        },
      });

      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: ${expiredUsers.length}`,
      );

      if (expiredUsers.length === 0) {
        this.logger.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏');
        return;
      }

      let sentCount = 0;
      let errorCount = 0;

      for (const user of expiredUsers) {
        try {
          const existingLog = await this.prisma.eventLog.findFirst({
            where: {
              userId: user.id,
              action: 'EXPIRED_NOTIFICATION_SENT',
              timestamp: {
                gte: today,
              },
            },
          });

          if (existingLog) {
            this.logger.log(
              `‚è≠Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`,
            );
            continue;
          }

          const isTrialPeriod = this.isUserTrialPeriod(user);

          let message: string;
          if (isTrialPeriod) message = this.getTrialExpiredMessage(user);
          else message = this.getSubscriptionExpiredMessage(user);

          await this.bot.telegram.sendMessage(
            user.telegramId.toString(),
            message,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'buy_subscription',
                    },
                    {
                      text: 'üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                      callback_data: 'enter_promo',
                    },
                  ],
                  [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );

          await this.prisma.eventLog.create({
            data: {
              userId: user.id,
              action: 'EXPIRED_NOTIFICATION_SENT',
              metadata: {
                expiryDate: user.subscriptionEnd?.toISOString(),
                isTrialPeriod,
                notificationType: 'expired_today',
              },
            },
          });

          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`,
          );

          await new Promise((resolve) => setTimeout(resolve, 100));
        } catch (error) {
          errorCount++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
            error,
          );
        }
      }

      this.logger.log(
        `üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏:',
        error,
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 8:00
   */
  @Cron('0 8 * * 1', {
    name: 'weekly-stats',
    timeZone: 'Europe/Moscow',
  })
  async sendWeeklyStats() {
    this.logger.log('üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...');

    try {
      const adminIds =
        process.env.ADMIN_IDS?.split(',').map((id) => parseInt(id.trim())) ||
        [];

      if (adminIds.length === 0) {
        this.logger.log('‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);

      const stats = await this.getWeeklyStatistics(weekAgo);
      const message = this.formatWeeklyStatsMessage(stats);

      for (const adminId of adminIds) {
        try {
          await this.bot.telegram.sendMessage(adminId.toString(), message, {
            parse_mode: 'Markdown',
          });
          this.logger.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}`);
        } catch (error) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}:`,
            error,
          );
        }
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
   */
  private isUserTrialPeriod(user: any): boolean {
    if (!user.subscriptionEnd) return false;

    const now = new Date();
    if (user.subscriptionEnd <= now) return false;

    if (user.promoCodeUsedId) return false;

    const daysSinceCreation =
      (now.getTime() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24);
    return daysSinceCreation < 8;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   */
  private getTrialExpiryMessage(user: any): string {
    const expiryDate = user.subscriptionEnd?.toLocaleDateString('ru-RU');
    return `üéÅ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ*\n\n‚ö†Ô∏è –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${expiryDate}\n\nüí° *–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN:*\n‚Ä¢ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /buy\n‚Ä¢ –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ /promo\n\nüöÄ –ù–µ —Ç–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private getSubscriptionExpiryMessage(user: any): string {
    const expiryDate = user.subscriptionEnd?.toLocaleDateString('ru-RU');
    return `üìã *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${expiryDate}\n\nüí° *–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:*\n‚Ä¢ –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /buy\n‚Ä¢ –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ /promo\n\nüîí –û–±–µ—Å–ø–µ—á—å—Ç–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞—â–∏—Ç—É –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   */
  private getTrialExpiredMessage(user: any): string {
    return `üéÅ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n‚ùå –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫ —Å–µ–≥–æ–¥–Ω—è\n\nüí∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN:*\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω: /buy\n‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo\n\n‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\nüöÄ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private getSubscriptionExpiredMessage(user: any): string {
    return `üìã *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*\n\n‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ —Å–µ–≥–æ–¥–Ω—è\n\nüîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø:*\n‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /buy\n‚Ä¢ –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ, –∏—Å—Ç–µ–∫–∞—é—â–µ–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è
   */
  private getTrialThreeDayReminderMessage(user: any): string {
    const expiryDate = user.subscriptionEnd?.toLocaleDateString('ru-RU');
    return `üéÅ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ*\n\nüìÖ –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è!\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${expiryDate}\n\n‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è:*\n‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏: /buy\n‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö: /promo\n\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN –∑–∞—Ä–∞–Ω–µ–µ!`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ, –∏—Å—Ç–µ–∫–∞—é—â–µ–π —á–µ—Ä–µ–∑ 3 –¥–Ω—è
   */
  private getSubscriptionThreeDayReminderMessage(user: any): string {
    const expiryDate = user.subscriptionEnd?.toLocaleDateString('ru-RU');
    return `üìã *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\nüìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è!\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${expiryDate}\n\n‚è∞ *–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—é:*\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω: /buy\n‚Ä¢ –ò–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo\n\nüîí –û–±–µ—Å–ø–µ—á—å—Ç–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞—â–∏—Ç—É –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!`;
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ, –∏—Å—Ç–µ–∫–∞—é—â–µ–π —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
   */
  private getSubscriptionWeekReminderMessage(user: any): string {
    const expiryDate = user.subscriptionEnd?.toLocaleDateString('ru-RU');
    return `üìã *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\nüìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${expiryDate}\n\nüí° *–£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è:*\n‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏: /buy\n‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ —Å–∫–∏–¥–∫–æ–π: /promo\n‚Ä¢ –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ\n\nüéØ –ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN!`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
   */
  private async getWeeklyStatistics(weekAgo: Date) {
    const now = new Date();

    const [
      newUsers,
      activeSubscriptions,
      expiredSubscriptions,
      totalPayments,
      promoCodesUsed,
    ] = await Promise.all([
      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      this.prisma.user.count({
        where: {
          createdAt: { gte: weekAgo },
          isDeleted: false,
        },
      }),

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      this.prisma.user.count({
        where: {
          subscriptionEnd: { gt: now },
          isDeleted: false,
        },
      }),

      // –ò—Å—Ç–µ–∫—à–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏
      this.prisma.user.count({
        where: {
          subscriptionEnd: {
            gte: weekAgo,
            lt: now,
          },
          isDeleted: false,
        },
      }),

      // –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
      this.prisma.payment.findMany({
        where: {
          createdAt: { gte: weekAgo },
          status: 'completed',
        },
        select: {
          amount: true,
        },
      }),

      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
      this.prisma.eventLog.count({
        where: {
          action: 'PROMO_CODE_ACTIVATED',
          timestamp: { gte: weekAgo },
        },
      }),
    ]);

    const totalRevenue = totalPayments.reduce(
      (sum, payment) => sum + payment.amount,
      0,
    );

    return {
      newUsers,
      activeSubscriptions,
      expiredSubscriptions,
      totalPayments: totalPayments.length,
      totalRevenue,
      promoCodesUsed,
      weekStart: weekAgo,
      weekEnd: now,
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  private formatWeeklyStatsMessage(stats: any): string {
    const weekStart = stats.weekStart.toLocaleDateString('ru-RU');
    const weekEnd = stats.weekEnd.toLocaleDateString('ru-RU');
    const revenueRub = (stats.totalRevenue / 100).toFixed(2);

    return `üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\nüìÖ ${weekStart} - ${weekEnd}\n\nüë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n‚Ä¢ –ù–æ–≤—ã—Ö: ${stats.newUsers}\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${stats.activeSubscriptions}\n‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${stats.expiredSubscriptions}\n\nüí∞ *–ü–ª–∞—Ç–µ–∂–∏:*\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.totalPayments}\n‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${revenueRub} ‚ÇΩ\n\nüé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã:*\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${stats.promoCodesUsed}\n\nüìà –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã!`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   */
  async sendBroadcastMessage(
    message: string,
    targetType: 'all' | 'active' | 'expired' = 'all',
  ): Promise<{ sent: number; errors: number }> {
    this.logger.log(`üì¢ –ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–∏–ø–∞: ${targetType}`);

    let whereClause: any = { isDeleted: false };
    const now = new Date();

    switch (targetType) {
      case 'active':
        whereClause.subscriptionEnd = { gt: now };
        break;
      case 'expired':
        whereClause.subscriptionEnd = { lt: now };
        break;
      // 'all' - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    }

    const users = await this.prisma.user.findMany({
      where: whereClause,
      select: {
        id: true,
        telegramId: true,
      },
    });

    this.logger.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${users.length}`);

    let sentCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        await this.bot.telegram.sendMessage(
          user.telegramId.toString(),
          message,
          { parse_mode: 'Markdown' },
        );
        sentCount++;

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await this.prisma.eventLog.create({
          data: {
            userId: user.id,
            action: 'BROADCAST_MESSAGE_SENT',
            metadata: {
              targetType,
              messageLength: message.length,
              sentAt: new Date().toISOString(),
            },
          },
        });

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 50));
      } catch (error) {
        errorCount++;
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
          error,
        );
      }
    }

    this.logger.log(
      `üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`,
    );
    return { sent: sentCount, errors: errorCount };
  }

  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
   */
  @Cron('0 0 * * *', {
    name: 'subscription-access-management',
    timeZone: 'Europe/Moscow',
	})
  async manageSubscriptionAccess() {
    this.logger.log('üîê –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º...');

    try {
      const now = new Date();

      // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
      const expiredUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            lt: now,
          },
					configIssued: true, 
          isDeleted: false,
          wgId: {
            not: null,
          },
        },
        select: {
          id: true,
          telegramId: true,
          username: true,
          subscriptionEnd: true,
          wgId: true,
          promoCodeUsedId: true,
        },
      });

      const activeUsers = await this.prisma.user.findMany({
        where: {
          subscriptionEnd: {
            gte: now,
          },
          isDeleted: false,
          wgId: {
            not: null,
          },
        },
        select: {
          id: true,
          wgId: true,
        },
      });

      let expiredProcessed = 0;
      let activeProcessed = 0;
      let expiredErrors = 0;
      let activeErrors = 0;

			for (const user of expiredUsers) {
        try {
          if (user.wgId) {
            const disabled = await this.wireGuardService.disableClient(
              user.wgId,
            );
            if (disabled) {
              this.logger.log(
                `üö´ –û—Ç–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (WG ID: ${user.wgId})`,
              );
            }
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
          const isTrialUser = user.promoCodeUsedId === null;
          const subscriptionType = isTrialUser ? '–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' : '–ø–æ–¥–ø–∏—Å–∫–∞';

          const message =
            `‚è∞ *–í–∞—à ${subscriptionType} –∏—Å—Ç–µ–∫*\n\n` +
            `üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${user.subscriptionEnd?.toLocaleDateString('ru-RU')}\n` +
            `üö´ –î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n` +
            `üí° *–ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN?*\n` +
            `‚Ä¢ üí≥ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n` +
            `‚Ä¢ üé´ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥\n` +
            `‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤\n\n` +
            `üîÑ –ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

          await this.bot.telegram.sendMessage(
            user.telegramId.toString(),
            message,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      callback_data: 'buy_subscription',
                    },
                    { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'enter_promo' },
                  ],
                  [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );

          expiredProcessed++;

          // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
          await this.prisma.eventLog.create({
            data: {
              userId: user.id,
              action: 'SUBSCRIPTION_EXPIRED_ACCESS_DISABLED',
              metadata: {
                subscriptionEndDate: user.subscriptionEnd?.toISOString(),
                wgId: user.wgId,
                isTrialUser,
                disabledAt: new Date().toISOString(),
              },
            },
          });

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          await new Promise((resolve) => setTimeout(resolve, 100));
        } catch (error) {
          expiredErrors++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`,
            error,
          );
        }
      }

      // 4. –í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
      for (const user of activeUsers) {
        try {
          if (user.wgId) {
            const enabled = await this.wireGuardService.enableClient(user.wgId);
            if (enabled) {
              this.logger.log(
                `‚úÖ –í–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (WG ID: ${user.wgId})`,
              );
              activeProcessed++;
            }
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          await new Promise((resolve) => setTimeout(resolve, 50));
        } catch (error) {
          activeErrors++;
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`,
            error,
          );
        }
      }

      const totalExpired = expiredUsers.length;
      const totalActive = activeUsers.length;

      this.logger.log(
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:\n` +
          `üö´ –û—Ç–∫–ª—é—á–µ–Ω–æ: ${expiredProcessed}/${totalExpired} (–æ—à–∏–±–æ–∫: ${expiredErrors})\n` +
          `‚úÖ –í–∫–ª—é—á–µ–Ω–æ: ${activeProcessed}/${totalActive} (–æ—à–∏–±–æ–∫: ${activeErrors})`,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.prisma.eventLog.create({
        data: {
          userId: 0, // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
          action: 'DAILY_ACCESS_MANAGEMENT_COMPLETED',
          metadata: {
            totalExpiredUsers: totalExpired,
            expiredProcessed,
            expiredErrors,
            totalActiveUsers: totalActive,
            activeProcessed,
            activeErrors,
            processedAt: new Date().toISOString(),
          },
        },
      });
    } catch (error) {
      this.logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:', error);
    }
  }
}
