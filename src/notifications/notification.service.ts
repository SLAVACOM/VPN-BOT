import { Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { PrismaService } from 'prisma/prisma.service';
import { escapeUserInput, safeMarkdown } from 'src/utils/format.utils';
import { Telegraf } from 'telegraf';

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  constructor(
    private readonly prisma: PrismaService,
    @InjectBot() private readonly bot: Telegraf,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendPersonalNotification(
    userId: number,
    message: string,
    options?: {
      parseMode?: 'Markdown' | 'HTML';
      replyMarkup?: any;
      logAction?: string;
    },
  ): Promise<boolean> {
    try {
      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        select: { telegramId: true, isDeleted: true },
      });

      if (!user || user.isDeleted) {
        this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω`);
        return false;
      }

      await this.bot.telegram.sendMessage(
        user.telegramId.toString(),
        safeMarkdown(message),
        {
          parse_mode: options?.parseMode || 'Markdown',
          reply_markup: options?.replyMarkup,
        },
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω logAction
      if (options?.logAction) {
        await this.prisma.eventLog.create({
          data: {
            userId,
            action: options.logAction,
            metadata: {
              messageLength: message.length,
              sentAt: new Date().toISOString(),
            },
          },
        });
      }

      return true;
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
        error,
      );
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
   */
  async sendPaymentSuccessNotification(
    userId: number,
    planName: string,
    days: number,
    newExpiryDate: Date,
  ): Promise<boolean> {
    const message = `üéâ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\nüì¶ –ü–ª–∞–Ω: ${escapeUserInput(planName)}\n‚è∞ –ü–µ—Ä–∏–æ–¥: ${days} –¥–Ω–µ–π\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${newExpiryDate.toLocaleDateString('ru-RU')}\n\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN!`;

    return this.sendPersonalNotification(userId, message, {
      logAction: 'PAYMENT_SUCCESS_NOTIFICATION_SENT',
      replyMarkup: {
        inline_keyboard: [
          [
            { text: 'üì± –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥', callback_data: 'qr' },
            { text: 'üìÑ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥', callback_data: 'config' },
          ],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   */
  async sendPromoActivationNotification(
    userId: number,
    promoCode: string,
    daysAdded: number,
    newExpiryDate: Date,
  ): Promise<boolean> {
    const message = `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n‚úÖ –ö–æ–¥: ${escapeUserInput(promoCode)}\n‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: ${daysAdded}\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${newExpiryDate.toLocaleDateString('ru-RU')}\n\nüéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN!`;

    return this.sendPersonalNotification(userId, message, {
      logAction: 'PROMO_ACTIVATION_NOTIFICATION_SENT',
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendWelcomeNotification(
    userId: number,
    hasReferrer: boolean,
    referrerName?: string,
  ): Promise<boolean> {
    let message = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å!*\n\nüéÅ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\nüöÄ *–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n‚Ä¢ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!`;

    if (hasReferrer && referrerName) {
      message += `\n\nüë• –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${referrerName}`;
    }

    return this.sendPersonalNotification(userId, message, {
      logAction: 'WELCOME_NOTIFICATION_SENT',
      replyMarkup: {
        inline_keyboard: [
          [
            { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr' },
            { text: 'üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', callback_data: 'config' },
          ],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async sendAdminRegistrationNotification(
    newUserId: number,
    userTelegramId: string,
    username?: string,
    firstName?: string,
    lastName?: string,
    referrerName?: string,
  ): Promise<boolean> {
    const adminIds =
      process.env.ADMIN_IDS?.split(',').map((id) => parseInt(id.trim())) || [];

    if (adminIds.length === 0) {
      this.logger.warn('ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return false;
    }

    const displayName = username
      ? `@${escapeUserInput(username)}`
      : `${escapeUserInput(firstName || '')} ${escapeUserInput(lastName || '')}`.trim() ||
        '–ë–µ–∑ –∏–º–µ–Ω–∏';

    let message = `üë§ *–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!*\n\n`;
    message += `üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${newUserId}\n`;
    message += `üì± Telegram ID: ${userTelegramId}\n`;
    message += `üëã –ò–º—è: ${displayName}\n`;
    message += `üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 7 –¥–Ω–µ–π\n`;
    message += `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

    if (referrerName) {
      message += `\nüë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${escapeUserInput(referrerName)}`;
    }

    let successCount = 0;
    for (const adminId of adminIds) {
      try {
        await this.bot.telegram.sendMessage(
          adminId.toString(),
          safeMarkdown(message),
          {
            parse_mode: 'Markdown',
          },
        );
        successCount++;
      } catch (error) {
        this.logger.error(
          `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}:`,
          error,
        );
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await this.prisma.eventLog.create({
      data: {
        userId: newUserId,
        action: 'ADMIN_REGISTRATION_NOTIFICATION_SENT',
        metadata: {
          adminCount: adminIds.length,
          successCount,
          userTelegramId,
          displayName,
          referrerName: referrerName || null,
        },
      },
    });

    return successCount > 0;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–∫—É–ø–∫–µ
   */
  async sendAdminPurchaseNotification(
    userId: number,
    planName: string,
    amount: number,
    currency: string,
    paymentMethod: string,
    username?: string,
    firstName?: string,
    lastName?: string,
  ): Promise<boolean> {
    const adminIds =
      process.env.ADMIN_IDS?.split(',').map((id) => parseInt(id.trim())) || [];

    if (adminIds.length === 0) {
      this.logger.warn('ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return false;
    }

    const displayName = username
      ? `@${escapeUserInput(username)}`
      : `${escapeUserInput(firstName || '')} ${escapeUserInput(lastName || '')}`.trim() ||
        '–ë–µ–∑ –∏–º–µ–Ω–∏';

    let message = `üí∞ *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!*\n\n`;
    message += `üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}\n`;
    message += `üëã –ò–º—è: ${displayName}\n`;
    message += `üì¶ –ü–ª–∞–Ω: ${escapeUserInput(planName)}\n`;
    message += `üíµ –°—É–º–º–∞: ${amount} ${escapeUserInput(currency)}\n`;
    message += `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${escapeUserInput(paymentMethod)}\n`;
    message += `üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

    let successCount = 0;
    for (const adminId of adminIds) {
      try {
        await this.bot.telegram.sendMessage(
          adminId.toString(),
          safeMarkdown(message),
          {
            parse_mode: 'Markdown',
          },
        );
        successCount++;
      } catch (error) {
        this.logger.error(
          `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}:`,
          error,
        );
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await this.prisma.eventLog.create({
      data: {
        userId,
        action: 'ADMIN_PURCHASE_NOTIFICATION_SENT',
        metadata: {
          adminCount: adminIds.length,
          successCount,
          planName,
          amount,
          currency,
          paymentMethod,
          displayName,
        },
      },
    });

    return successCount > 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserNotificationSettings(userId: number) {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return {
      expiryReminders: true,
      paymentNotifications: true,
      promoNotifications: true,
      broadcastMessages: true,
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  async getNotificationStats(fromDate: Date, toDate: Date) {
    const stats = await this.prisma.eventLog.groupBy({
      by: ['action'],
      where: {
        timestamp: {
          gte: fromDate,
          lte: toDate,
        },
        action: {
          in: [
            'EXPIRY_REMINDER_SENT',
            'THREE_DAY_REMINDER_SENT',
            'WEEK_REMINDER_SENT',
            'EXPIRED_NOTIFICATION_SENT',
            'PAYMENT_SUCCESS_NOTIFICATION_SENT',
            'PROMO_ACTIVATION_NOTIFICATION_SENT',
            'WELCOME_NOTIFICATION_SENT',
            'BROADCAST_MESSAGE_SENT',
            'ADMIN_REGISTRATION_NOTIFICATION_SENT',
            'ADMIN_PURCHASE_NOTIFICATION_SENT',
          ],
        },
      },
      _count: {
        action: true,
      },
    });

    return stats.reduce(
      (acc, stat) => {
        acc[stat.action] = stat._count.action;
        return acc;
      },
      {} as Record<string, number>,
    );
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
   */
  async scheduleDelayedNotification(
    userId: number,
    message: string,
    sendAt: Date,
    notificationType: string,
  ) {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –≤ cron-–∑–∞–¥–∞—á–µ
    this.logger.log(
      `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${sendAt.toISOString()}`,
    );

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    await this.prisma.eventLog.create({
      data: {
        userId,
        action: 'NOTIFICATION_SCHEDULED',
        metadata: {
          scheduledFor: sendAt.toISOString(),
          notificationType,
          messageLength: message.length,
        },
      },
    });
  }
}
