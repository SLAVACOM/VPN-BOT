import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject, Injectable } from '@nestjs/common';
import { SubscriptionPlan } from '@prisma/client';
import { Cache } from 'cache-manager';
import { PrismaService } from '../../prisma/prisma.service';
import {
  CreateInvoiceResult,
  PaymentCallbackData,
  PaymentPlan,
} from './interfaces';
import { PaymentHistoryService } from './payment-history.service';

@Injectable()
export class PaymentService {
  private readonly providerToken: string;
  private readonly CACHE_KEY_PLANS = 'payment_plans';
  private readonly CACHE_TTL = 0;

  constructor(
    @Inject(CACHE_MANAGER) private cacheManager: Cache,
    private prisma: PrismaService,
    private paymentHistoryService: PaymentHistoryService,
  ) {
    this.providerToken = process.env.TELEGRAM_PAYMENT_PROVIDER_TOKEN || '';

    if (!this.providerToken) {
      console.warn(
        '[PAYMENT] Telegram payment provider token not found in environment variables',
      );
      console.warn(
        '[PAYMENT] Set TELEGRAM_PAYMENT_PROVIDER_TOKEN to enable payments',
      );
    } else {
      console.log(
        '[PAYMENT] Telegram Payments service initialized with database and Redis cache',
      );
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç PaymentPlan
   */
  private transformDatabasePlan(dbPlan: SubscriptionPlan): PaymentPlan {
    return {
      id: dbPlan.id.toString(),
      name: dbPlan.name,
      description:
        dbPlan.description || `${dbPlan.durationDays} –¥–Ω–µ–π VPN –¥–æ—Å—Ç—É–ø–∞`,
      price: Number(dbPlan.price),
      days: dbPlan.durationDays,
      popular: dbPlan.name.includes('–°—Ç–∞–Ω–¥–∞—Ä—Ç'), // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ë–î
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getPlans(): Promise<PaymentPlan[]> {
    try {
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cachedPlans = await this.cacheManager.get<PaymentPlan[]>(
        this.CACHE_KEY_PLANS,
      );

      if (cachedPlans) {
        console.log('[PAYMENT] Plans loaded from cache');
        return cachedPlans;
      }

      // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('[PAYMENT] Loading plans from database');
      const dbPlans = await this.prisma.subscriptionPlan.findMany({
        where: { isActive: true },
        orderBy: { durationDays: 'asc' },
      });

      const plans = dbPlans.map((plan) => this.transformDatabasePlan(plan));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await this.cacheManager.set(this.CACHE_KEY_PLANS, plans, this.CACHE_TTL);
      console.log('[PAYMENT] Plans cached for', this.CACHE_TTL, 'seconds');

      return plans;
    } catch (error) {
      console.error('[PAYMENT] Error loading plans:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ fallback –ø–ª–∞–Ω—ã
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getPlanById(planId: string): Promise<PaymentPlan | undefined> {
    const plans = await this.getPlans();
    return plans.find((plan) => plan.id === planId);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–ª–∞–Ω–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
   */
  async clearPlansCache(): Promise<void> {
    await this.cacheManager.del(this.CACHE_KEY_PLANS);
    console.log('[PAYMENT] Plans cache cleared');
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å invoice –¥–ª—è Telegram Payments
   */
  async createInvoice(
    userId: number,
    planId: string,
  ): Promise<CreateInvoiceResult> {
    if (!this.providerToken) {
      return {
        success: false,
        message: '–°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      };
    }

    const plan = await this.getPlanById(planId);
    if (!plan) {
      return {
        success: false,
        message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.',
      };
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const invoicePayload = `${userId}_${planId}_${Date.now()}`;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
      const paymentRecord = await this.paymentHistoryService.createPayment({
        userId,
        amount: plan.price,
        currency: 'RUB',
        method: 'telegram_payments',
        status: 'pending',
        planId: parseInt(planId),
        invoicePayload,
        description: `–û–ø–ª–∞—Ç–∞ –ø–ª–∞–Ω–∞: ${plan.name}`,
        metadata: {
          planName: plan.name,
          planDays: plan.days,
          createTimestamp: Date.now(),
        },
      });

      console.log('[PAYMENT] Creating invoice:', {
        userId,
        planId,
        amount: plan.price,
        invoicePayload,
        paymentRecordId: paymentRecord.id,
      });

      return {
        success: true,
        invoicePayload,
      };
    } catch (error) {
      console.error('[PAYMENT] Error creating invoice:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   */
  async handleSuccessfulPayment(
    telegramPaymentChargeId: string,
    providerPaymentChargeId: string,
    invoicePayload: string,
    totalAmount: number,
    currency: string,
  ): Promise<PaymentCallbackData | null> {
    try {
      console.log('[PAYMENT] Processing successful payment:', {
        telegramPaymentChargeId,
        providerPaymentChargeId,
        invoicePayload,
        totalAmount,
        currency,
      });

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ payload
      const existingPayment =
        await this.paymentHistoryService.findByInvoicePayload(invoicePayload);

      if (existingPayment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        await this.paymentHistoryService.updatePayment(existingPayment.id, {
          status: 'completed',
          telegramPaymentChargeId,
          providerPaymentChargeId,
          metadata: {
            completedTimestamp: Date.now(),
            actualAmount: totalAmount,
            actualCurrency: currency,
          },
        });

        console.log(
          '[PAYMENT] Updated existing payment record:',
          existingPayment.id,
        );
      } else {
        console.warn(
          '[PAYMENT] No existing payment record found for payload:',
          invoicePayload,
        );
      }

      // –†–∞–∑–±–∏—Ä–∞–µ–º payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–ª–∞–Ω–µ
      const payloadParts = invoicePayload.split('_');
      const userId = payloadParts[0];
      const planId = payloadParts.slice(1, -1).join('_'); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π

      if (!userId || !planId) {
        console.error('[PAYMENT] Invalid invoice payload:', invoicePayload);
        return null;
      }

      return {
        telegramPaymentChargeId,
        providerPaymentChargeId,
        userId: parseInt(userId),
        planId,
        totalAmount,
        currency,
      };
    } catch (error) {
      console.error('[PAYMENT] Error handling successful payment:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
   */
  getProviderToken(): string {
    return this.providerToken;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async getPlansText(): Promise<string> {
    const plans = await this.getPlans();
    let text = 'üí∞ **–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n';

    plans.forEach((plan, index) => {
      const popular = plan.popular ? ' üî• **–ü–û–ü–£–õ–Ø–†–ù–´–ô**' : '';
      const priceRub = plan.price / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
      const pricePerDay = Math.round(priceRub / plan.days);

      text += `**${plan.name}**${popular}\n`;
      text += `${plan.description}\n`;
      text += `üíµ ${priceRub} ‚ÇΩ (${pricePerDay} ‚ÇΩ/–¥–µ–Ω—å)\n`;
      text += `‚è∞ ${plan.days} –¥–Ω–µ–π\n`;

      if (index < plans.length - 1) {
        text += '\n';
      }
    });

    return text;
  }
}
