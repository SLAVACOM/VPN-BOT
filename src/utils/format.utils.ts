import { PaymentStatistics } from '../payment/interfaces/payment.interface';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param amount - —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
 * @param currency - –≤–∞–ª—é—Ç–∞
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export function formatAmount(amount: number, currency: string = 'RUB'): string {
  const amountInRubles = amount / 100;
  return `${amountInRubles.toFixed(2)} ${currency}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param date - –¥–∞—Ç–∞
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
 * @param text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function escapeMarkdown(text: string): string {
  return text.replace(/([_*[\]()~`>#+-=|{}.!])/g, '\\$1');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatPaymentStats(stats: PaymentStatistics): string {
  const totalAmountFormatted = formatAmount(stats.totalAmount);
  const avgAmountFormatted = formatAmount(stats.averageAmount);

  let message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π**\n\n`;
  message += `üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.totalPayments}\n`;
  message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.completedPayments}\n`;
  message += `‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: ${stats.failedPayments}\n`;
  message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${escapeMarkdown(totalAmountFormatted)}\n`;
  message += `üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${escapeMarkdown(avgAmountFormatted)}\n\n`;

  if (stats.paymentsByStatus.length > 0) {
    message += `üìã **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n`;
    stats.paymentsByStatus.forEach((stat) => {
      const amount = stat._sum.amount || 0;
      const amountFormatted = formatAmount(amount);
      message += `‚Ä¢ ${escapeMarkdown(stat.status)}: ${stat._count.status} (${escapeMarkdown(amountFormatted)})\n`;
    });
    message += `\n`;
  }

  if (stats.paymentsByMethod.length > 0) {
    message += `üí≥ **–ü–æ –º–µ—Ç–æ–¥–∞–º:**\n`;
    stats.paymentsByMethod.forEach((stat) => {
      const amount = stat._sum.amount || 0;
      const amountFormatted = formatAmount(amount);
      message += `‚Ä¢ ${escapeMarkdown(stat.method)}: ${stat._count.method} (${escapeMarkdown(amountFormatted)})\n`;
    });
    message += `\n`;
  }

  if (stats.recentPayments.length > 0) {
    message += `üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n`;
    stats.recentPayments.slice(0, 5).forEach((payment) => {
      const amountFormatted = formatAmount(payment.amount, payment.currency);
      const dateFormatted = formatDate(payment.createdAt);
      const username = payment.user.username
        ? `@${payment.user.username}`
        : `ID: ${payment.user.telegramId}`;
      message += `‚Ä¢ ${escapeMarkdown(amountFormatted)} - ${escapeMarkdown(username)} (${escapeMarkdown(dateFormatted)})\n`;
    });
  }

  return message;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param history - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatUserPaymentHistory(history: any): string {
  if (history.payments.length === 0) {
    return 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π';
  }

  const totalAmountFormatted = formatAmount(history.totalAmount);

  let message = `üìã **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π**\n\n`;
  message += `üìä –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${history.totalPayments}\n`;
  message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${escapeMarkdown(totalAmountFormatted)}\n\n`;

  history.payments.forEach((payment: any, index: number) => {
    const amountFormatted = formatAmount(payment.amount, payment.currency);
    const dateFormatted = formatDate(payment.createdAt);
    const statusEmoji =
      payment.status === 'completed'
        ? '‚úÖ'
        : payment.status === 'failed'
          ? '‚ùå'
          : '‚è≥';

    message += `${index + 1}. ${statusEmoji} ${escapeMarkdown(amountFormatted)}\n`;
    message += `   üìÖ ${escapeMarkdown(dateFormatted)}\n`;
    if (payment.plan) {
      message += `   üì¶ ${escapeMarkdown(payment.plan.name)} (${payment.plan.durationDays} –¥–Ω–µ–π)\n`;
    }
    message += `   üí≥ ${escapeMarkdown(payment.method)}\n\n`;
  });

  return message;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 * @param expiresAt - –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 */
export function calculateDaysLeft(expiresAt: Date): number {
  const now = new Date();
  const diffTime = expiresAt.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return Math.max(0, diffDays);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç payload –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param planId - ID –ø–ª–∞–Ω–∞
 * @returns payload —Å—Ç—Ä–æ–∫–∞
 */
export function createInvoicePayload(userId: number, planId: string): string {
  return JSON.stringify({
    userId,
    planId,
    timestamp: Date.now(),
  });
}

/**
 * –ü–∞—Ä—Å–∏—Ç payload –∏–∑ –∏–Ω–≤–æ–π—Å–∞
 * @param payload - payload —Å—Ç—Ä–æ–∫–∞
 * @returns –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 */
export function parseInvoicePayload(
  payload: string,
): { userId: number; planId: string; timestamp: number } | null {
  try {
    const parsed = JSON.parse(payload);
    if (
      typeof parsed.userId === 'number' &&
      typeof parsed.planId === 'string'
    ) {
      return parsed;
    }
    return null;
  } catch {
    return null;
  }
}
