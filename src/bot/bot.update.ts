import { Action, Command, Ctx, Help, On, Start, Update } from 'nestjs-telegraf';
import { PrismaService } from 'prisma/prisma.service';
import { NotificationSchedulerService } from 'src/notifications/notification-scheduler.service';
import { NotificationService } from 'src/notifications/notification.service';
import { PaymentHistoryService } from 'src/payment/payment-history.service';
import { PaymentService } from 'src/payment/payment.service';
import { PlanAdminService } from 'src/payment/plan-admin.service';
import { UserService } from 'src/user/user.service';
import { escapeMarkdown } from 'src/utils/format.utils';
import { WireGuardService } from 'src/wireGuardService/WireGuardService.service';
import { Context } from 'telegraf';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å match
interface CallbackContext extends Context {
  match?: RegExpMatchArray;
}

@Update()
export class BotUpdate {
  private readonly adminIds =
    process.env.ADMIN_IDS?.split(',').map((id) => parseInt(id.trim())) || [];
  private readonly trialPeriodDays = Number(process.env.TRIAL_PERIOD_DAYS) || 7;

  constructor(
    private readonly userService: UserService,
    private readonly wgService: WireGuardService,
    private readonly paymentService: PaymentService,
    private readonly paymentHistoryService: PaymentHistoryService,
    private readonly planAdminService: PlanAdminService,
    private readonly notificationScheduler: NotificationSchedulerService,
    private readonly notificationService: NotificationService,
    private readonly prisma: PrismaService,
  ) {
    this.setupBotCommands();
  }

  private async setupBotCommands() {
    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCommands = [
        { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
        { command: 'ref', description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' },
        { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' },
        { command: 'subscription', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ' },
        { command: 'buy', description: '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' },
        { command: 'payments', description: '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π' },
        { command: 'qr', description: 'QR-–∫–æ–¥ –¥–ª—è WireGuard' },
        { command: 'config', description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard' },
        { command: 'promo', description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' },
        { command: 'checkref', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞' },
      ];

      // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
      const adminCommands = [
        ...userCommands,
        { command: 'createpromo', description: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ [ADMIN]' },
        { command: 'listpromos', description: '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ [ADMIN]' },
        { command: 'listplans', description: '–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ [ADMIN]' },
        { command: 'paymentstats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π [ADMIN]' },
        {
          command: 'clearplanscache',
          description: '–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–ª–∞–Ω–æ–≤ [ADMIN]',
        },
        { command: 'broadcast', description: '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ [ADMIN]' },
        {
          command: 'notifstats',
          description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π [ADMIN]',
        },
      ];

      console.log('[BOT] Setting up bot commands...');

      console.log('[BOT] User commands:', userCommands);
      console.log('[BOT] Admin commands:', adminCommands);
    } catch (error) {
      console.error('Error setting up bot commands:', error);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
  private getUserMainKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data: 'ref' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        ],
        [
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr' },
          { text: 'üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', callback_data: 'config' },
        ],
        [
          { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_help' },
          { text: 'üìã –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'subscription' },
        ],
        [
          { text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' },
          { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'payment_history' },
        ],
        [
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help_menu' },
          { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', callback_data: 'quick_actions' },
        ],
      ],
    };
  }

  private getAdminKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data: 'ref' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        ],
        [
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr' },
          { text: 'üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', callback_data: 'config' },
        ],
        [
          { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_help' },
          { text: 'üìã –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'subscription' },
        ],
        [
          { text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' },
          { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'payment_history' },
        ],
        [
          { text: 'üîß –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'admin_createpromo' },
          { text: 'üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data: 'admin_listpromos' },
        ],
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤', callback_data: 'admin_listplans' },
          {
            text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π',
            callback_data: 'admin_paymentstats',
          },
        ],
        [
          { text: 'üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' },
          {
            text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            callback_data: 'admin_notifstats',
          },
        ],
        [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', callback_data: 'admin_clearplanscache' }],
        [
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help_menu' },
          { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', callback_data: 'quick_actions' },
        ],
      ],
    };
  }

  private getHelpKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          {
            text: 'üí° –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞?',
            callback_data: 'help_ref',
          },
        ],
        [{ text: 'üìä –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?', callback_data: 'help_stats' }],
        [
          {
            text: 'üé´ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?',
            callback_data: 'help_promo',
          },
        ],
        [
          {
            text: 'üì± –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WireGuard?',
            callback_data: 'help_wireguard',
          },
        ],
        [
          {
            text: 'üí∞ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?',
            callback_data: 'help_subscription',
          },
        ],
        [{ text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'help_support' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
      ],
    };
  }

  private getQuickActionsKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'quick_connect' },
          { text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', callback_data: 'quick_share' },
        ],
        [
          { text: 'ÔøΩ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' },
          { text: 'üéØ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'enter_promo' },
        ],
        [
          { text: 'üìã –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription' },
          { text: 'üìñ –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_help_menu' },
        ],
        [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
      ],
    };
  }

  private async getPaymentPlansKeyboard(): Promise<InlineKeyboardMarkup> {
    const plans = await this.paymentService.getPlans();
    const keyboard: any[] = [];

    plans.forEach((plan) => {
      const planText = plan.popular
        ? `üî• ${plan.name} - ${plan.price / 100} ‚ÇΩ`
        : `${plan.name} - ${plan.price / 100} ‚ÇΩ`;

      keyboard.push([
        {
          text: planText,
          callback_data: `buy_plan_${plan.id}`,
        },
      ]);
    });

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    return { inline_keyboard: keyboard };
  }

  private getPaymentConfirmKeyboard(planId: string): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          {
            text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram',
            callback_data: `confirm_payment_${planId}`,
          },
        ],
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'buy_subscription' },
          { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' },
        ],
      ],
    };
  }

  @Start()
  async onStart(ctx: Context) {
    const tgId = ctx.from?.id;
    const username = ctx.from?.username;

    if (!tgId) return;

    console.log(`[START] User ${tgId} (${username}) started the bot`);

    let referrerUserId: number | undefined;
    let referrerUsername: string | undefined;

    if ('text' in ctx.message!) {
      const parts = ctx.message.text.split(' ');
      console.log(`[START] Message parts:`, parts);

      if (parts.length > 1) {
        const referrerTgId = parseInt(parts[1]);
        console.log(`[START] Parsed referrer TG ID: ${referrerTgId}`);

        if (!isNaN(referrerTgId) && referrerTgId !== tgId) {
          const referrerUser =
            await this.userService.findByTelegramId(referrerTgId);
          console.log(
            `[START] Found referrer user:`,
            referrerUser
              ? `ID=${referrerUser.id}, username=${referrerUser.username}`
              : 'not found',
          );

          if (referrerUser) {
            referrerUserId = referrerUser.id;
            referrerUsername = referrerUser.username || undefined;
          }
        } else {
          console.log(`[START] Invalid referrer TG ID or same as user`);
        }
      }
    }

    let user = await this.userService.findByTelegramId(tgId);

    if (user) {
      await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ');

      const isAdmin = this.isAdmin(tgId);
      const keyboard = isAdmin
        ? this.getAdminKeyboard()
        : this.getUserMainKeyboard();

      await ctx.reply('üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: keyboard,
      });
      return;
    }

    try {
      const config = await this.wgService.registerClient(tgId.toString());
      const wgId = await this.wgService.findClientIdByPublicKey(
        config.publicKey,
      );

      console.log(`[START] Creating user with referrer ID: ${referrerUserId}`);

      const createdUser = await this.userService.createUser(
        tgId,
        username,
        {
          wgAddress: config.address,
          wgPublicKey: config.publicKey,
          wgPrivateKey: config.privateKey,
          wgId: wgId,
        },
        referrerUserId,
      );

      console.log(
        `[START] User created with ID: ${createdUser.id}, invitedById: ${createdUser.invitedById}`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      try {
        const referrerName = referrerUsername ? `@${referrerUsername}` : null;
        await this.notificationService.sendAdminRegistrationNotification(
          createdUser.id,
          tgId.toString(),
          username,
          ctx.from?.first_name,
          ctx.from?.last_name,
          referrerName!,
        );
      } catch (error) {
        console.error('Error sending admin registration notification:', error);
      }

      let welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard –≤—ã–¥–∞–Ω–∞ ‚úÖ\n\nüéÅ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN\nüìÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${createdUser.subscriptionEnd?.toLocaleDateString('ru-RU')}`;
      if (referrerUserId) {
        const referrerDisplay = referrerUsername
          ? `@${referrerUsername}`
          : `#${referrerUserId}`;
        welcomeMessage += `\nüë• –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${referrerDisplay}`;
      }

      await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });

      // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isAdmin = this.isAdmin(tgId);
      const keyboard = isAdmin
        ? this.getAdminKeyboard()
        : this.getUserMainKeyboard();

      await ctx.reply(
        'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\nüí° *–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN.',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        },
      );
    } catch (error) {
      console.error('Error during user registration:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @Help()
  async onHelp(ctx: Context) {
    const tgId = ctx.from?.id;
    let helpMessage =
      '‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help ‚Äî –ø–æ–º–æ—â—å\n/ref ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–ª–∏ /stats) ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n/checkref ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\n/qr ‚Äî –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –¥–ª—è WireGuard\n/config ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard\n/promo <–∫–æ–¥> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n/subscription ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n/buy ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';

    // –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (tgId && this.isAdmin(tgId)) {
      helpMessage +=
        '\n\nüîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/createpromo <–∫–æ–¥> <–¥–Ω–∏> [–º–∞–∫—Å] [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n/listpromos ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤';
    }

    await ctx.reply(helpMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });
  }

  @Command(['menu', '–º–µ–Ω—é', '–≥–ª–∞–≤–Ω–∞—è'])
  async onMenu(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        {
          reply_markup: {
            inline_keyboard: [[{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'start' }]],
          },
        },
      );
      return;
    }

    const isAdmin = this.isAdmin(tgId);
    const keyboard = isAdmin
      ? this.getAdminKeyboard()
      : this.getUserMainKeyboard();

    const welcomeText = isAdmin
      ? `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\nüéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.`
      : `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.`;

    await ctx.reply(welcomeText, {
      reply_markup: keyboard,
    });
  }

  @Command('ref')
  async onRef(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
      return;
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏
    const refLink = `https://t.me/${ctx.me}?start=${user.telegramId.toString()}`;

    console.log(`[REF] User ${user.id} requested referral link: ${refLink}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await ctx.reply(`üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n${refLink}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const stats = await this.userService.getReferralStats(user.id);
    console.log(`[REF] Referral stats:`, stats);

    let statsMessage = `üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n`;
    statsMessage += `–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalInvited}\n`;

    if (stats.invitedUsers.length > 0) {
      statsMessage += `\nüìù –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n`;
      stats.invitedUsers.forEach((invitedUser, index) => {
        const username = invitedUser.username
          ? `@${invitedUser.username}`
          : `ID: ${invitedUser.telegramId}`;
        const date = new Date(invitedUser.createdAt).toLocaleDateString(
          'ru-RU',
        );
        statsMessage += `${index + 1}. ${username} (${date})\n`;
      });
    } else {
      statsMessage += `\nüì≠ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ`;
    }

    await ctx.reply(statsMessage);
  }

  @Command(['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats', 'stat'])
  async onStats(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
      return;
    }

    const stats = await this.userService.getReferralStats(user.id);
    console.log(`[STATS] User ${user.id} requested stats:`, stats);

    let statsMessage = `üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n`;
    statsMessage += `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalInvited}\n`;

    if (stats.invitedUsers.length > 0) {
      statsMessage += `\nüìù –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n`;
      stats.invitedUsers.forEach((invitedUser, index) => {
        const username = invitedUser.username
          ? `@${invitedUser.username}`
          : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username`;
        const date = new Date(invitedUser.createdAt).toLocaleDateString(
          'ru-RU',
        );
        const time = new Date(invitedUser.createdAt).toLocaleTimeString(
          'ru-RU',
          { hour: '2-digit', minute: '2-digit' },
        );
        statsMessage += `${index + 1}. ${username}\n`;
        statsMessage += `   üìÖ –î–∞—Ç–∞: ${date} –≤ ${time}\n`;
        statsMessage += `   üÜî ID: @${invitedUser.telegramId}\n\n`;
      });
    } else {
      statsMessage += `\nüì≠ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ\n`;
      statsMessage += `üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!`;
    }

    await ctx.reply(statsMessage);
  }

  @Command(['qr', 'qrcode', '–∫—é–∞—Ä'])
  async onQRCode(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      );
      return;
    }

    if (!user.wgId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    try {
      console.log(
        `[QR] User ${user.id} requested QR code for WG ID: ${user.wgId}`,
      );

      await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥...');

      const qrBuffer = await this.wgService.getClientQRCode(user.wgId);

      console.log(`[QR] QR code generated, size: ${qrBuffer.length} bytes`);

      await ctx.replyWithPhoto(
        { source: qrBuffer },
        {
          caption:
            'üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WireGuard\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
        },
      );
    } catch (error) {
      console.error('Error generating QR code:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  @Command(['config', '–∫–æ–Ω—Ñ–∏–≥', 'configuration'])
  async onConfig(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      );
      return;
    }

    if (!user.wgId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    try {
      console.log(
        `[CONFIG] User ${user.id} requested config for WG ID: ${user.wgId}`,
      );

      await ctx.reply('üîÑ –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');

      const config = await this.wgService.getClientConfiguration(user.wgId);

      console.log(
        `[CONFIG] Configuration retrieved, length: ${config.length} chars`,
      );

      const configBuffer = Buffer.from(config, 'utf-8');

      await ctx.reply(
        `üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard:\n\n\`\`\`\n${config}\n\`\`\``,
        { parse_mode: 'Markdown' },
      );

      await ctx.replyWithDocument(
        {
          source: configBuffer,
          filename: `wireguard-${user.wgId.substring(0, 8)}.conf`,
        },
        {
          caption:
            'üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard\n\n–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard.',
        },
      );
    } catch (error) {
      console.error('Error getting configuration:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  @Command(['promo', '–ø—Ä–æ–º–æ–∫–æ–¥', 'promocode'])
  async onPromoCode(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      );
      return;
    }

    if (!('text' in ctx.message!)) {
      await ctx.reply(
        '‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>\n\n–ü—Ä–∏–º–µ—Ä: /promo WELCOME2024\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.',
      );
      return;
    }

    const parts = ctx.message.text.split(' ');
    if (parts.length < 2) {
      await ctx.reply(
        '‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>\n\n–ü—Ä–∏–º–µ—Ä: /promo WELCOME2024\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.',
      );
      return;
    }

    const promoCode = parts[1].toUpperCase().trim();

    console.log(
      `[PROMO] User ${user.id} trying to activate promo code: ${promoCode}`,
    );

    try {
      await ctx.reply('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–º–æ–∫–æ–¥...');

      const result = await this.userService.activatePromoCode(
        user.id,
        promoCode,
      );

      if (result.success) {
        let message = `üéâ ${result.message}!\n\n`;
        if (result.newSubscriptionEnd) {
          const endDate = new Date(
            result.newSubscriptionEnd,
          ).toLocaleDateString('ru-RU');
          message += `üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate}`;
        }
        await ctx.reply(message);
      } else {
        await ctx.reply(`‚ùå ${result.message}`);
      }
    } catch (error) {
      console.error('Error in promo code command:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  @Command(['subscription', '–ø–æ–¥–ø–∏—Å–∫–∞', 'sub'])
  async onSubscription(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      );
      return;
    }

    const userWithPromo = await this.userService.getUserWithPromoCode(user.id);

    let message = `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:\n\n`;

    if (userWithPromo?.subscriptionEnd) {
      const now = new Date();
      const endDate = new Date(userWithPromo.subscriptionEnd);

      if (endDate > now) {
        const daysLeft = Math.ceil(
          (endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24),
        );
        const endDateStr = endDate.toLocaleDateString('ru-RU');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (–µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
        const isTrialPeriod =
          !userWithPromo.promoCodeUsed &&
          userWithPromo.createdAt &&
          now.getTime() - userWithPromo.createdAt.getTime() <
            8 * 24 * 60 * 60 * 1000; // —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 8 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

        if (isTrialPeriod) {
          message += `üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω\n`;
          message += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDateStr}\n`;
          message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n`;
          message += `üí° –≠—Ç–æ –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π\n`;
        } else {
          message += `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n`;
          message += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDateStr}\n`;
          message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n`;
        }
      } else {
        message += `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n`;
        message += `üìÖ –ò—Å—Ç–µ–∫–ª–∞: ${endDate.toLocaleDateString('ru-RU')}\n`;
      }
    } else {
      message += `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    if (userWithPromo?.promoCodeUsed) {
      message += `\nüé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: ${userWithPromo.promoCodeUsed.code}`;
      if (userWithPromo.promoCodeUsed.description) {
        message += `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userWithPromo.promoCodeUsed.description}`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if (userWithPromo?.subscriptionEnd) {
      const now = new Date();
      const endDate = new Date(userWithPromo.subscriptionEnd);

      if (endDate <= now) {
        message += `\n\nÔøΩ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy`;
        message += `\nüé´ –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo <–∫–æ–¥>`;
      } else {
        message += `\n\nüé´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /promo <–∫–æ–¥> –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞`;
        message += `\nüí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /buy`;
      }
    } else {
      message += `\n\nüí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /buy`;
      message += `\nüé´ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo <–∫–æ–¥>`;
    }

    await ctx.reply(message);
  }

  @Command(['buy', '–∫—É–ø–∏—Ç—å', 'payment', '–æ–ø–ª–∞—Ç–∞'])
  async onBuySubscription(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply(
        '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      );
      return;
    }

    const plansText = await this.paymentService.getPlansText();
    const keyboard = await this.getPaymentPlansKeyboard();

    await ctx.reply(
      `üí∞ *–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ VPN*\n\n${plansText}\n\nüí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      },
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
  @Action('ref')
  async handleRefCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onRef(ctx);
  }

  @Action('stats')
  async handleStatsCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onStats(ctx);
  }

  @Action('qr')
  async handleQRCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onQRCode(ctx);
  }

  @Action('config')
  async handleConfigCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onConfig(ctx);
  }

  @Action('subscription')
  async handleSubscriptionCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onSubscription(ctx);
  }

  @Action('help')
  async handleHelpCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onHelp(ctx);
  }

  @Action('promo_help')
  async handlePromoHelpCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üé´ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /promo <–∫–æ–¥>\n\n–ü—Ä–∏–º–µ—Ä: /promo WELCOME30\n\nüí° –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  @Action('start')
  async handleStartCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onStart(ctx);
  }

  @Action('back_to_menu')
  async handleBackToMenuCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onMenu(ctx);
  }

  @Action('admin_createpromo')
  async handleAdminCreatePromoCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    await ctx.reply(
      'üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /createpromo <–∫–æ–¥> <–¥–Ω–∏> [–º–∞–∫—Å] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä: /createpromo SUMMER30 30 500 –õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  @Action('admin_listpromos')
  async handleAdminListPromosCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    await this.onListPromos(ctx);
  }

  // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  @Action('show_help_menu')
  async handleShowHelpMenuCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      '‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:',
      {
        reply_markup: this.getHelpKeyboard(),
      },
    );
  }

  @Action('quick_actions')
  async handleQuickActionsCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply('‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: this.getQuickActionsKeyboard(),
    });
  }

  @Action('help_ref')
  async handleHelpRefCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üí° *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:*\n\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\nüë• –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã\nüìä –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∏–¥–Ω–æ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüí∞ –†–µ—Ñ–µ—Ä–∞–ª—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n1. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"\n2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏\n3. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'ref' }],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('help_stats')
  async handleHelpStatsCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\nüìà –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüìÖ –î–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\nüë§ Username –∏–ª–∏ ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n*–î–≤–∞ –≤–∏–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*\n‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è - –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è - —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n*–ó–∞—á–µ–º –Ω—É–∂–Ω–∞:*\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n‚Ä¢ –í–∏–¥–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'stats' }],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('help_promo')
  async handleHelpPromoCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã:*\n\nüí∞ –î–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏\nüî¢ –ò–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n‚è±Ô∏è –ú–æ–≥—É—Ç –∏–º–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\nüë§ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥\n\n*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/promo –ö–û–î–ü–†–û–ú–û`\n2. –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –¥–Ω–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–µ\n3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥–ø–∏—Å–∫–∞"\n\n*–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n‚Ä¢ WELCOME30 - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π\n‚Ä¢ SUMMER50 - —Å–µ–∑–æ–Ω–Ω—ã–π\n‚Ä¢ FRIEND10 - –¥–ª—è –¥—Ä—É–∑–µ–π',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéØ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'enter_promo' }],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('help_wireguard')
  async handleHelpWireguardCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üì± *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard:*\n\n*1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*\n‚Ä¢ [Android](https://play.google.com/store/apps/details?id=com.wireguard.android)\n‚Ä¢ [iOS](https://apps.apple.com/app/wireguard/id1441195209)\n‚Ä¢ [Windows](https://www.wireguard.com/install/)\n‚Ä¢ [macOS](https://apps.apple.com/app/wireguard/id1451685025)\n\n*2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:*\n‚Ä¢ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n‚Ä¢ –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .conf —Ñ–∞–π–ª\n\n*3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:*\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—é–±–æ–º —Å–∞–π—Ç–µ\n\nüí° *–°–æ–≤–µ—Ç:* QR-–∫–æ–¥ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ñ–∞–π–ª - –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr' },
              { text: 'üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞', callback_data: 'config' },
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('help_subscription')
  async handleHelpSubscriptionCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üí∞ *–ü–æ–¥–ø–∏—Å–∫–∞:*\n\n‚è∞ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN\n‚Ä¢ –ò–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –¥–Ω—è—Ö\n‚Ä¢ –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç–æ–π\n\nüìÖ *–°—Ç–∞—Ç—É—Å—ã:*\n‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ - VPN —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚Ä¢ ‚ùå –ò—Å—Ç–µ–∫–ª–∞ - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å\n‚Ä¢ ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n\nüîÑ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:*\n‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ /promo\n‚Ä¢ –ü–æ–∫—É–ø–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏\n\nüìä *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscription' }],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('help_support')
  async handleHelpSupportCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n\n*–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n\nüîå *–ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è VPN:*\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n‚ö° *–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:*\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ç—å\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\nüì± *–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:*\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ WireGuard –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n‚Ä¢ –ü–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n*–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n‚Ä¢ Telegram direct: @slavacom\\_vpn\n‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
                callback_data: 'show_help_menu',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('quick_connect')
  async handleQuickConnectCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      '‚ö° *–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± QR-–∫–æ–¥ (–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞)', callback_data: 'qr' }],
            [{ text: 'üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–ª—è –ü–ö)', callback_data: 'config' }],
            [{ text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscription' }],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –±—ã—Å—Ç—Ä—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º',
                callback_data: 'quick_actions',
              },
            ],
          ],
        },
      },
    );
  }

  @Action('quick_share')
  async handleQuickShareCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onRef(ctx);
  }

  @Action('enter_promo')
  async handleEnterPromoCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üéØ *–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/promo –í–ê–®_–ü–†–û–ú–û–ö–û–î`\n\n–ü—Ä–∏–º–µ—Ä:\n`/promo WELCOME30`\n\nüí° –ü—Ä–æ–º–æ–∫–æ–¥ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –±—ã—Å—Ç—Ä—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º',
                callback_data: 'quick_actions',
              },
            ],
          ],
        },
      },
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  @Action('buy_subscription')
  async handleBuySubscriptionCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onBuySubscription(ctx);
  }

  @Action(/buy_plan_(.+)/)
  async handleBuyPlanCallback(@Ctx() ctx: CallbackContext) {
    await ctx.answerCbQuery();

    if (!ctx.match) return;
    const planId = ctx.match[1];

    const plan = await this.paymentService.getPlanById(planId);
    if (!plan) {
      await ctx.reply('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const keyboard = this.getPaymentConfirmKeyboard(planId);

    await ctx.reply(
      `üí∞ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:*\n\nüì¶ *${plan.name}*\n${plan.description}\n\nüíµ *–¶–µ–Ω–∞:* ${plan.price / 100} ‚ÇΩ\n‚è∞ *–ü–µ—Ä–∏–æ–¥:* ${plan.days} –¥–Ω–µ–π\n\nüîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ÆKassa\n‚ö° –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      },
    );
  }

  @Action(/confirm_payment_(.+)/)
  async handleConfirmPaymentCallback(@Ctx() ctx: CallbackContext) {
    await ctx.answerCbQuery();

    if (!ctx.match) return;
    const planId = ctx.match[1];
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const plan = await this.paymentService.getPlanById(planId);
    if (!plan) {
      await ctx.reply('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      const result = await this.paymentService.createInvoice(user.id, planId);

      if (result.success && result.invoicePayload) {
        const providerToken = this.paymentService.getProviderToken();

        if (!providerToken) {
          await ctx.reply(
            '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
          );
          return;
        }

        await ctx.replyWithInvoice({
          title: plan.name,
          description: plan.description,
          payload: result.invoicePayload,
          provider_token: providerToken,
          currency: 'RUB',
          prices: [
            {
              label: plan.name,
              amount: plan.price,
            },
          ],
          need_email: false,
          need_phone_number: false,
          need_shipping_address: false,
          is_flexible: false,
        });

        console.log(
          `[PAYMENT] Created invoice for user ${user.id}, plan ${planId}, payload: ${result.invoicePayload}`,
        );
      } else {
        await ctx.reply(`‚ùå ${result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç'}`);
      }
    } catch (error) {
      console.error('Error creating invoice:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Telegram
  @On('pre_checkout_query')
  async handlePreCheckoutQuery(@Ctx() ctx: Context) {
    try {
      console.log(
        '[PAYMENT] Pre-checkout query received:',
        ctx.preCheckoutQuery,
      );

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–ª–∞–Ω –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω

      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error('Error in pre-checkout query:', error);
      await ctx.answerPreCheckoutQuery(
        false,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
      );
    }
  }

  @On('successful_payment')
  async handleSuccessfulPayment(@Ctx() ctx: Context) {
    try {
      const payment = (ctx.message as any)?.successful_payment;
      if (!payment) return;

      console.log('[PAYMENT] Successful payment received:', payment);

      const paymentData = await this.paymentService.handleSuccessfulPayment(
        payment.telegram_payment_charge_id,
        payment.provider_payment_charge_id,
        payment.invoice_payload,
        payment.total_amount,
        payment.currency,
      );

      if (paymentData) {
        const plan = await this.paymentService.getPlanById(paymentData.planId);
        const result = await this.userService.addSubscriptionDays(
          paymentData.userId,
          plan?.days || 0,
          payment.telegram_payment_charge_id,
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö
        try {
          const paymentRecord =
            await this.paymentHistoryService.findByTelegramChargeId(
              payment.telegram_payment_charge_id,
            );
          if (paymentRecord) {
            await this.paymentHistoryService.updatePayment(paymentRecord.id, {
              daysAdded: plan?.days || 0,
            });
          }
        } catch (error) {
          console.error(
            '[PAYMENT] Error updating payment record with days added:',
            error,
          );
        }

        if (result.success && plan) {
          const endDate =
            result.newSubscriptionEnd?.toLocaleDateString('ru-RU');

          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ WireGuard –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
          try {
            const user = await this.userService.findByTelegramId(
              ctx.from?.id || 0,
            );
            if (user?.wgId) {
              const enabled = await this.wgService.enableClient(user.wgId);
              if (enabled) {
                console.log(
                  `[PAYMENT] –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø WireGuard –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`,
                );
              } else {
                console.warn(
                  `[PAYMENT] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø WireGuard –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`,
                );
              }
            }
          } catch (error) {
            console.error(
              'Error enabling WireGuard access after payment:',
              error,
            );
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–∫—É–ø–∫–µ
          try {
            const user = await this.userService.findByTelegramId(
              ctx.from?.id || 0,
            );
            if (user) {
              await this.notificationService.sendAdminPurchaseNotification(
                user.id,
                plan.name,
                payment.total_amount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
                payment.currency,
                'Telegram Payments',
                ctx.from?.username,
                ctx.from?.first_name,
                ctx.from?.last_name,
              );
            }
          } catch (error) {
            console.error('Error sending admin purchase notification:', error);
          }

          await ctx.reply(
            `üéâ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\nüì¶ –ü–ª–∞–Ω: ${plan.name}\n‚è∞ –ü–µ—Ä–∏–æ–¥: ${plan.days} –¥–Ω–µ–π\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate}\n\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN!`,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üì± –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥', callback_data: 'qr' },
                    { text: 'üìÑ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥', callback_data: 'config' },
                  ],
                  [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          );
        }
      } else {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        );
      }
    } catch (error) {
      console.error('Error handling successful payment:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      );
    }
  }

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
  private isAdmin(userId: number): boolean {
    return this.adminIds.includes(userId);
  }

  @Command(['createpromo', '—Å–æ–∑–¥–∞—Ç—å–ø—Ä–æ–º–æ'])
  async onCreatePromo(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    if (!('text' in ctx.message!)) {
      await ctx.reply(
        '‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo <–∫–æ–¥> <–¥–Ω–∏> [–º–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä: /createpromo WELCOME30 30 100 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
      );
      return;
    }

    const parts = ctx.message.text.split(' ');
    if (parts.length < 3) {
      await ctx.reply(
        '‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo <–∫–æ–¥> <–¥–Ω–∏> [–º–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä: /createpromo WELCOME30 30 100 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
      );
      return;
    }

    const code = parts[1].toUpperCase();
    const discountDays = parseInt(parts[2]);
    const maxUses = parts[3] ? parseInt(parts[3]) : 1000;
    const description = parts.slice(4).join(' ') || undefined;

    if (isNaN(discountDays) || discountDays <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π');
      return;
    }

    if (parts[3] && (isNaN(maxUses) || maxUses <= 0)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    try {
      const result = await this.userService.createPromoCode({
        code,
        discountDays,
        maxUses,
        description,
      });

      if (result.success) {
        let message = `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n`;
        message += `üé´ –ö–æ–¥: ${result.promoCode?.code}\n`;
        message += `‚è∞ –î–Ω–µ–π: ${result.promoCode?.discountDays}\n`;
        message += `üî¢ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${result.promoCode?.maxUses}\n`;
        if (result.promoCode?.description) {
          message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.promoCode.description}\n`;
        }

        await ctx.reply(message);
      } else {
        await ctx.reply(`‚ùå ${result.message}`);
      }
    } catch (error) {
      console.error('Error creating promo code:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  }

  @Command(['listpromos', '—Å–ø–∏—Å–æ–∫–ø—Ä–æ–º–æ'])
  async onListPromos(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    try {
      const promoCodes = await this.userService.listPromoCodes();

      if (promoCodes.length === 0) {
        await ctx.reply('üì≠ –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      let message = `üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n`;

      promoCodes.forEach((promo, index) => {
        const status = promo.isActive ? '‚úÖ' : '‚ùå';
        const usage = `${promo.usedCount}/${promo.maxUses}`;
        const expiry = promo.expiresAt
          ? promo.expiresAt < new Date()
            ? ' (–∏—Å—Ç—ë–∫)'
            : ` (–¥–æ ${promo.expiresAt.toLocaleDateString('ru-RU')})`
          : '';

        message += `${index + 1}. ${status} ${promo.code}\n`;
        message += `   ‚è∞ ${promo.discountDays} –¥–Ω–µ–π\n`;
        message += `   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage}${expiry}\n`;
        if (promo.description) {
          message += `   üìù ${promo.description}\n`;
        }
        message += `\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      console.error('Error listing promo codes:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.');
    }
  }

  // –ù–æ–≤—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–ª–∞–Ω–æ–≤
  @Command(['listplans', '–ø–ª–∞–Ω—ã'])
  async onListPlans(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    try {
      const plans = await this.planAdminService.getAllPlans();
      const stats = await this.planAdminService.getPlansStatistics();

      let message = `üìã *–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n`;
      message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤: ${stats.totalPlans}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activePlans}\n`;
      message += `‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactivePlans}\n\n`;

      if (plans.length === 0) {
        message += 'üì≠ –ü–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
      } else {
        plans.forEach((plan, index) => {
          const status = plan.isActive ? '‚úÖ' : '‚ùå';
          const priceRub = Number(plan.price) / 100;

          message += `${index + 1}. ${status} *${plan.name}* (ID: ${plan.id})\n`;
          message += `   üíµ ${priceRub} ‚ÇΩ –∑–∞ ${plan.durationDays} –¥–Ω–µ–π\n`;
          message += `   üí± ${plan.currency}\n`;
          if (plan.description) {
            message += `   üìù ${plan.description}\n`;
          }
          message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${plan.createdAt.toLocaleDateString('ru-RU')}\n\n`;
        });
      }

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error listing plans:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤.');
    }
  }

  @Command(['clearplanscache', '–æ—á–∏—Å—Ç–∏—Ç—å–∫—ç—à'])
  async onClearPlansCache(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    try {
      await this.paymentService.clearPlansCache();
      await ctx.reply('‚úÖ –ö—ç—à –ø–ª–∞–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!');
    } catch (error) {
      console.error('Error clearing plans cache:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞–Ω–∞–º–∏
  @Action('admin_listplans')
  async handleAdminListPlansCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    await this.onListPlans(ctx);
  }

  @Action('admin_clearplanscache')
  async handleAdminClearPlansCacheCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    await this.onClearPlansCache(ctx);
  }

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
  @Command(['payments', '–ø–ª–∞—Ç–µ–∂–∏', 'history'])
  async onPaymentHistory(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    const user = await this.userService.findByTelegramId(tgId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      const payments = await this.paymentHistoryService.getUserPaymentHistory(
        user.id,
        5,
      );

      if (payments.length === 0) {
        await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π');
        return;
      }

      let message = `üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:*\n\n`;

      payments.forEach((payment, index) => {
        const status =
          payment.status === 'completed'
            ? '‚úÖ'
            : payment.status === 'pending'
              ? '‚è≥'
              : payment.status === 'failed'
                ? '‚ùå'
                : '‚ùì';
        const amount = payment.amount / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        const date = payment.createdAt.toLocaleDateString('ru-RU');
        const planName = payment.plan?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω';

        message += `${index + 1}. ${status} *${planName}*\n`;
        message += `   üíµ ${amount} ‚ÇΩ\n`;
        message += `   üìÖ ${date}\n`;
        message += `\n`;
      });

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error getting payment history:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π.');
    }
  }

  @Command(['paymentstats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–ø–ª–∞—Ç–µ–∂–µ–π'])
  async onPaymentStats(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    try {
      const stats = await this.paymentHistoryService.getPaymentStatistics();

      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:*\n\n`;
      message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.totalPayments.toString()}\n`;
      message += `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.completedPayments.toString()}\n`;
      message += `‚Ä¢ –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: ${stats.failedPayments.toString()}\n`;
      message += `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${(stats.totalAmount / 100).toFixed(2)} ‚ÇΩ\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: ${(stats.averageAmount / 100).toFixed(2)} ‚ÇΩ\n\n`;

      message += `üìã **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n`;
      stats.paymentsByStatus.forEach((stat) => {
        const amount = (stat._sum.amount || 0) / 100;
        message += `‚Ä¢ ${stat.status}: ${stat._count.status.toString()} (${amount.toFixed(2)} ‚ÇΩ)\n`;
      });

      message += `\nüí≥ *–ü–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã:*\n`;
      stats.paymentsByMethod.forEach((stat) => {
        const amount = (stat._sum.amount || 0) / 100;
        message += `‚Ä¢ ${stat.method}: ${stat._count.method.toString()} (${amount.toFixed(2)} ‚ÇΩ)\n`;
      });

      await ctx.reply(escapeMarkdown(message), { parse_mode: 'MarkdownV2' });
    } catch (error) {
      console.error('Error getting payment statistics:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  @Action('payment_history')
  async handlePaymentHistoryCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await this.onPaymentHistory(ctx);
  }

  @Action('admin_paymentstats')
  async handleAdminPaymentStatsCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    await this.onPaymentStats(ctx);
  }

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  @Command(['broadcast', '—Ä–∞—Å—Å—ã–ª–∫–∞'])
  async onBroadcast(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    if (!('text' in ctx.message!)) {
      await ctx.reply(
        'üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/broadcast <—Ç–∏–ø> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n\nüìã *–¢–∏–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:*\n‚Ä¢ `all` - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ `active` - —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n‚Ä¢ `expired` - —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüí° *–ü—Ä–∏–º–µ—Ä:*\n`/broadcast all –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–∞!`',
        { parse_mode: 'Markdown' },
      );
      return;
    }

    const parts = ctx.message.text.split(' ');
    if (parts.length < 3) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–∏–ø> <—Å–æ–æ–±—â–µ–Ω–∏–µ>',
      );
      return;
    }

    const targetType = parts[1] as 'all' | 'active' | 'expired';
    const message = parts.slice(2).join(' ');

    if (!['all', 'active', 'expired'].includes(targetType)) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: all, active, expired',
      );
      return;
    }

    try {
      await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...');

      const result = await this.notificationScheduler.sendBroadcastMessage(
        message,
        targetType,
      );

      let resultMessage = `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n`;
      resultMessage += `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n`;
      resultMessage += `‚ùå –û—à–∏–±–æ–∫: ${result.errors}\n`;
      resultMessage += `üìã –¢–∏–ø: ${targetType}\n`;
      resultMessage += `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}`;

      await ctx.reply(resultMessage, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in broadcast command:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
  }

  @Command(['notifstats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'])
  async onNotificationStats(@Ctx() ctx: Context) {
    const tgId = ctx.from?.id;
    if (!tgId) return;

    if (!this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    try {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);

      const today = new Date();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const notificationCounts = await this.prisma.eventLog.groupBy({
        by: ['action'],
        where: {
          timestamp: {
            gte: weekAgo,
            lte: today,
          },
          action: {
            in: [
              'EXPIRY_REMINDER_SENT',
              'THREE_DAY_REMINDER_SENT',
              'WEEK_REMINDER_SENT',
              'EXPIRED_NOTIFICATION_SENT',
              'WELCOME_NOTIFICATION_SENT',
              'BROADCAST_MESSAGE_SENT',
              'TRIAL_PERIOD_GRANTED',
              'ADMIN_REGISTRATION_NOTIFICATION_SENT',
              'ADMIN_PURCHASE_NOTIFICATION_SENT',
              'SUBSCRIPTION_EXPIRED_ACCESS_DISABLED',
              'DAILY_ACCESS_MANAGEMENT_COMPLETED',
            ],
          },
        },
        _count: {
          action: true,
        },
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const [totalUsers, activeSubscriptions, expiredSubscriptions] =
        await Promise.all([
          this.prisma.user.count({ where: { isDeleted: false } }),
          this.prisma.user.count({
            where: {
              subscriptionEnd: { gt: today },
              isDeleted: false,
            },
          }),
          this.prisma.user.count({
            where: {
              subscriptionEnd: { lt: today },
              isDeleted: false,
            },
          }),
        ]);

      let message = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n`;

      message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ: ${totalUsers}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions}\n`;
      message += `‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredSubscriptions}\n\n`;

      message += `üîî *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n`;

      const actionNames = {
        EXPIRY_REMINDER_SENT: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞)',
        THREE_DAY_REMINDER_SENT: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (3 –¥–Ω—è)',
        WEEK_REMINDER_SENT: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ–¥–µ–ª—è)',
        EXPIRED_NOTIFICATION_SENT: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏',
        WELCOME_NOTIFICATION_SENT: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ',
        BROADCAST_MESSAGE_SENT: '–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏',
        TRIAL_PERIOD_GRANTED: '–í—ã–¥–∞—á–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞',
        ADMIN_REGISTRATION_NOTIFICATION_SENT:
          '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–¥–º–∏–Ω)',
        ADMIN_PURCHASE_NOTIFICATION_SENT: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ (–∞–¥–º–∏–Ω)',
        SUBSCRIPTION_EXPIRED_ACCESS_DISABLED: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ (–∏—Å—Ç–µ—á–µ–Ω–∏–µ)',
        DAILY_ACCESS_MANAGEMENT_COMPLETED: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (—Å–∏—Å—Ç–µ–º–Ω–æ–µ)',
      };

      let totalNotifications = 0;
      notificationCounts.forEach((count) => {
        const actionName =
          actionNames[count.action as keyof typeof actionNames] || count.action;
        message += `‚Ä¢ ${actionName}: ${count._count.action}\n`;
        totalNotifications += count._count.action;
      });

      message += `\nüìä *–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:* ${totalNotifications}`;

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error getting notification stats:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
  @Action('admin_broadcast')
  async handleAdminBroadcastCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    await ctx.reply(
      'üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/broadcast <—Ç–∏–ø> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\nüìã *–¢–∏–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:*\n‚Ä¢ `all` - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ `active` - —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n‚Ä¢ `expired` - —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüí° *–ü—Ä–∏–º–µ—Ä:*\n`/broadcast all –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–∞!`',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  @Action('admin_notifstats')
  async handleAdminNotifStatsCallback(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    const tgId = ctx.from?.id;
    if (!tgId || !this.isAdmin(tgId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    await this.onNotificationStats(ctx);
  }
}
